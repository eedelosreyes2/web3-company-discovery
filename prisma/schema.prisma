datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

generator client {
  provider = "prisma-client-js"
}

// NextAuth Schemas
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Company Schemas
model Company {
  id          String  @id @default(cuid())
  name        String  @unique
  about       String?
  description String?
  email       String? @unique
  url         String  @unique
  logoUrl     String? @unique
  links       Link[]
  blockchains Blockchain[]
  tags        Tag[]
  published   Boolean @default(false)
}

model Link {
  id        String   @id @default(cuid())
  url       String   @unique
  type      String? // Twitter, Instagram, etc. 
  companies Company? @relation(fields: [companyId], references: [id])
  companyId String?
}

model Blockchain {
  id        String   @id @default(cuid())
  name      String   @unique
  companies Company? @relation(fields: [companyId], references: [id])
  companyId String?
}

model Tag {
  id        String   @id @default(cuid())
  name      String   @unique
  companies Company? @relation(fields: [companyId], references: [id])
  companyId String?
}
